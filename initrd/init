#!/bin/busybox sh
#
# By Chih-Wei Huang <cwhuang@linux.org.tw>
# and Thorsten Glaser <tg@mirbsd.org>
#
# Modified by BlissLabs & Contributors
#
# License: GNU Public License
# We explicitely grant the right to use the scripts
# with Android-x86 project.
#

PATH=/sbin:/bin:/system/bin:/system/xbin:/vendor/bin:/system_ext/bin:/system/vendor/bin:/system/system_ext/bin; export PATH

# ASCII art
text_art()
{
cat << "EOF"
==========================================================

  BLISS-BASS   -   Customizable Android Subsystem for PC

==========================================================
  This product was created using Bliss-Bass	
==========================================================
EOF
}

bliss_feature()
{
	if [ "$INTERNAL_MOUNT" -gt "0" ]; then
cat << "EOF"
# WARNING: INTERNAL_MOUNT option is enabled, all the internal partitions
# will now be recognized as USBs if the supported filesystem is available
# and will create empty directories like Android, DCIM, Documents, etc.

## DO NOT PRESS "TAP TO FIX", IT WILL FORMAT THE DRIVE!
EOF

	mount --bind system/vendor/etc/fstab.internal.x86 $(ls | grep fstab.)
	fi

	# Enabling AOSP features for PC
	if [ "$PC_MODE" -gt "0" ]; then
cat << "EOF"
# WARNING: PC_MODE will not work if you are using systemless root
# Visit BlissOS wiki for more info & solutions
EOF
		mount --bind system/etc/hidden_xml/pc.xml system/etc/permissions/pc.xml
	fi

	if [ "$HPE" -gt "0" ]; then
cat << "EOF"
# WARNING: HPE will not work if you are using systemless root
# Visit BlissOS wiki for more info & solutions
EOF
		mount --bind system/etc/hidden_xml/hpe.xml system/etc/sysconfig/hpe.xml
	fi

	# Hide bootctrl from VINTF manifest if we don't set up virtual A/B
	if [ ! "$(cat /proc/cmdline | grep androidboot.slot_suffix)" ]; then
cat << "EOF"
# WARNING: The system is booted in LIVE mode or installed without Virtual A/B, 
# OTA Updates will not be available while booting in this mode
EOF
	echo '<?xml version="1.0" encoding="utf-8"?>' > /tmp/fakeboot.xml
	echo '<manifest version="1.0" type="device">' >> /tmp/fakeboot.xml
	echo '</manifest>' >> /tmp/fakeboot.xml
	mount --bind /tmp/fakeboot.xml system/vendor/etc/vintf/manifest/android.hardware.boot@1.2.xml
	fi

# 	# Hide BLE feature from the system
# 	if [ "$BT_BLE_DISABLE" -ge "1" ]; then
# cat << "EOF"
# # NOTICE: BLE is set to be disabled
# EOF
# 	echo '<?xml version="1.0" encoding="utf-8"?>' > /tmp/noble.xml
# 	echo '<permissions>' >> /tmp/noble.xml
# 	echo '</permissions>' >> /tmp/noble.xml
# 	mount --bind /tmp/noble.xml system/vendor/etc/permissions/android.hardware.bluetooth_le.xml
# 	fi
}

feature_input_ports()
{
	# Allow adding to input-ports-associations.xml file using bind mount

	# This will let us add known internal namespace redirects to the system without 
	# recompiling the OS by passing additional hosts through an input-ports-addon.xml file.
	# How-To:
	# $ adb push input-ports-addon.xml /data/misc/input-port-addon.xml
	# input-ports-addon.xml: 1 file pushed, 0 skipped. 0.0 MB/s (8 bytes in 0.000s)
	# $ cat /data/misc/input-ports-addon.xml
	# 142.251.46.238  dorky.billybobs.pudding.slum.com
	# 143.244.220.150  dorky.bbpslum.com
	#
	# Then use the following from kernel cmdline:
	# BLISS_INPUT_PORTS_ADDON=1
	
	# Allow adding to hosts file using bind mount
	if [ "$BLISS_INPUT_PORTS_ADDON" -gt "0" ]; then
cat << "EOF"
# WARNING: INPUT_PORTS_ADDON is overriding the default input-port-associations.xml file.
# This override will not work if you are using systemless root
EOF
		# bind associations file if found
		if [ -f data/misc/input-port-addon.xml ]; then
			mount --bind data/misc/input-port-addon.xml system/vendor/etc/input-port-associations.xml
		fi
	fi
}

addon_idc()
{
	# /system/usr/idc/Vendor_0eef_Product_c002_Version_0111.idc
	if [ "$ADDON_IDC" -gt "0" ]; then
cat << "EOF"
# WARNING: ADDON_IDC is overriding idc files for this device.
# This override will not work if you are using systemless root
EOF
		if [ -f data/system/devices/idc/*.idc ]; then
			for file in data/system/devices/idc/*.idc; do
				mount --bind "$file" system/usr/idc/"$(basename "$file")"
			done
		fi
	fi
}

device_information()
{
	DMIPATH=/sys/class/dmi/id
	BOARD=$(cat $DMIPATH/board_name)
	PRODUCT=$(cat $DMIPATH/product_name)
	PRODUCT_FAM=$(cat $DMIPATH/product_family)
	PRODUCT_VER=$(cat $DMIPATH/product_version)
	UEVENT=$(cat $DMIPATH/uevent)
	VENDOR=$(cat $DMIPATH/sys_vendor)
	SERIALNO=$(cat $DMIPATH/product_serial)

	touch /tmp/device.prop

	case "$VENDOR" in
		*LENOVO*|*Lenovo*)
		echo ro.product.bliss.device="$PRODUCT_FAM" >> /tmp/device.prop
		echo ro.product.bliss.name="$PRODUCT_FAM" >> /tmp/device.prop
		;;
		*)
		echo ro.product.bliss.device="$PRODUCT" >> /tmp/device.prop
		echo ro.product.bliss.name="$PRODUCT" >> /tmp/device.prop
		;;
	esac

	echo ro.product.bliss.brand="$VENDOR" >> /tmp/device.prop
	echo ro.product.bliss.manufacturer="$(cat $DMIPATH/board_vendor)" >> /tmp/device.prop
	echo ro.product.bliss.model="$BOARD" >> /tmp/device.prop
	echo ro.product.board="$BOARD" >> /tmp/device.prop
	echo ro.bliss.serialnumber="$SERIALNO" >> /tmp/device.prop
	mount --bind /tmp/device.prop system/vendor/etc/device.prop
}

# OEM installation
if [ -n "$OEM_INSTALL" ]; then
	echo "Starting Installer"
	INSTALL=1
fi

# configure debugging output
if [ -n "$DEBUG" -o -n "$INSTALL" ]; then
	LOG=/tmp/log
	set -x
else
	LOG=/dev/null
	test -e "$LOG" || busybox mknod $LOG c 1 3
fi
exec 2>> $LOG

# early boot
if test x"$HAS_CTTY" != x"Yes"; then
	# initialise /proc & /sys and /tmp
	busybox mount -t proc proc /proc
	busybox mount -t sysfs sys /sys
	busybox mount -t tmpfs tmpfs /tmp
	# let busybox install all applets as symlinks
	busybox --install -s /bin
	# remove busybox fdisk & mke2fs
	rm /bin/fdisk
	rm /bin/mke2fs
	# spawn shells on tty 2 and 3 if debug or installer
	if test -n "$DEBUG" || test -n "$INSTALL"; then
		# ensure they can open a controlling tty
		mknod /dev/tty c 5 0
		# create device nodes then spawn on them
		mknod /dev/tty2 c 4 2 && openvt
		mknod /dev/tty3 c 4 3 && openvt
	fi
	if test -z "$DEBUG" || test -n "$INSTALL"; then
		echo 0 0 0 0 > /proc/sys/kernel/printk
	fi
	# initialise /dev (first time)
	busybox mount -t devtmpfs devtmpfs /dev
	mkdir -p /dev/block
	echo /bin/mdev > /proc/sys/kernel/hotplug
	mdev -s
	# re-run this script with a controlling tty
	exec env HAS_CTTY=Yes setsid cttyhack /bin/sh "$0" "$@"
fi

# now running under a controlling tty; debug output from stderr into log file
# boot up Android

# First, chmod /sbin because somehow the build process messed up the permission
chmod 755 /sbin/*

error()
{
	echo $*
	return 1
}

# check if $1 is UUID= or LABEL=
# getDeviceFile already exists but it's much more complicated than this
find_device()
{
	case "$1" in
	UUID=* | LABEL=*) busybox findfs "$1" ;;
	*) echo "$1" ;;
	esac
}

try_mount()
{
	RW=$1; shift
	if [ "${ROOT#*:/}" != "$ROOT" ]; then
		# for NFS roots, use nolock to avoid dependency to portmapper
		mount -o $RW,noatime,nolock $@
		return $?
	fi
	case $(blkid $1) in
		*TYPE=*ntfs*)
			if [ "$USE_NTFS3" -ge 1 ] || [ "$BOOT_USE_NTFS3" -ge 1 ]; then
				mount -t ntfs3 -o rw,noatime,windows_names $@
			else
				mount.ntfs-3g -o rw,force $@
			fi
			;;
		*TYPE=*)
			mount -o $RW,noatime $@
			;;
		*)
			return 1
			;;
	esac
}

remount_rw()
{
	# "foo" as mount source is given to workaround a Busybox bug with NFS
	# - as it's ignored anyways it shouldn't harm for other filesystems.
	mount -o remount,rw foo /mnt
}

debug_shell()
{
	if [ -x system/bin/sh ]; then
		echo Running MirBSD Korn Shell...
		USER="($1)" system/bin/sh -l 2>&1
		[ $? -ne 0 ] && /bin/sh 2>&1
	else
		echo Running busybox ash...
		busybox sh 2>&1
	fi
}

setup_loop()
{
	for i in $(seq 0 9); do
		if ! losetup /dev/loop$i >/dev/null 2>&1; then
			if losetup /dev/loop$i $1 >/dev/null 2>&1; then
				local dev="/dev/block/loop$i"

				ln -s "/dev/loop$i" "$dev"
				echo "$dev"

				return 0
			fi
		fi
	done
}

setup_ab_loops()
{
	# if [ -n "$RCVRY" ]; then
	# 	mkdir -p /dev/block/by-name
	# fi

	if [ ! -z "$SLOT" ]; then
		if [ "$SLOT" = "_a" ]; then
			ln -s $(setup_loop /mnt/$SRC/system_b.img) /dev/block/by-name/system_b
		else
			ln -s $(setup_loop /mnt/$SRC/system_a.img) /dev/block/by-name/system_a
		fi

		ln -s $(setup_loop /mnt/$SRC/initrd_a.img) /dev/block/by-name/initrd_a
		ln -s $(setup_loop /mnt/$SRC/initrd_b.img) /dev/block/by-name/initrd_b
		ln -s $(setup_loop /mnt/$SRC/kernel_a) /dev/block/by-name/kernel_a
		ln -s $(setup_loop /mnt/$SRC/kernel_b) /dev/block/by-name/kernel_b
		ln -s $(setup_loop /mnt/$SRC/misc.img) /dev/block/by-name/misc
	# 	ln -s $(setup_loop /mnt/$SRC/recovery.img) /dev/block/by-name/recovery
	# else
	# 	if [ -e "/sfs/system.img" ]; then
	# 		ln -s $(setup_loop /sfs/system.img) /dev/block/by-name/system
	# 	elif [ -e "/mnt/$SRC/system.img" ]; then
	# 		ln -s $(setup_loop /mnt/$SRC/system.img) /dev/block/by-name/system
	# 	else
	# 		echo "No loop mounting for system"
	# 	fi
	# 	ln -s $(setup_loop /mnt/$SRC/initrd.img) /dev/block/by-name/initrd
	# 	ln -s $(setup_loop /mnt/$SRC/kernel) /dev/block/by-name/kernel
	# 	ln -s $(setup_loop /mnt/$SRC/misc.img) /dev/block/by-name/misc
	# 	ln -s $(setup_loop /mnt/$SRC/recovery.img) /dev/block/by-name/recovery
	fi
}

# setup_data_loops()
# {
# 	if [ -n "$RCVRY" ]; then
# 		if [ -f /mnt/$SRC/data.img ]; then
# 			ln -s $(setup_loop /mnt/$SRC/data.img) /dev/block/by-name/userdata
# 		fi
# 	fi
# }

echo "Detecting Android-x86..."
echo ""
echo "If it took too long to detect, reboot and check your installation folder"
echo ""

[ -z "$SRC" -a -n "$BOOT_IMAGE" ] && SRC=`dirname $BOOT_IMAGE`

for c in `cat /proc/cmdline`; do
	case $c in
		iso-scan/filename=*)
			SRC=iso
			eval `echo $c | cut -b1-3,18-`
			;;
		androidboot.slot_suffix=*)
			eval SLOT=`echo $c | cut -f 2 -d "="`
			;;
		androidboot.efidisk=*)
			eval EFIDISK=`echo $c | cut -f 2 -d "="`
			;;
		androidboot.efidir=*)
			eval EFIDIR=`echo $c | cut -f 2 -d "="`
			;;
		*)
			;;
	esac
done

cd /
for device in /dev/[hmnsvx][dmrv][0-9a-z]*; do
	ln $device /dev/block
done

# if the android is partition table-based
IS_ALL_BLOCKDEV=1
for dev in $SYSTEM $DATA $RECOVERY; do
	case "$dev" in
	/dev/*) ;;
	*) IS_ALL_BLOCKDEV= && break ;;
	esac
done

if [ -z "$IS_ALL_BLOCKDEV" ]; then

	ROOT=$(find_device "$ROOT")
	if [ -z "$ROOT" ]; then
		source /hooks/0-find-rootdev
		find_rootdev 10 || debug_shell debug-late # maximum 10 iterations
	else
		try_mount ro $dev /mnt || debug_shell debug-late
	fi

	if [ -n "$INSTALL" ]; then
		if [ ! -d "/mnt/isolinux" ] || [ ! -f "/mnt/install.img" ]; then
			debug_shell debug-late
		fi
	fi

	if [ -n "$iso" -a -e /mnt/$iso ]; then
		mount --move /mnt /iso
		mkdir /mnt/iso
		mount -o loop /iso/$iso /mnt/iso
	fi

	if [ -z "$SYSTEM" ]; then
		source /hooks/1-find-system
		find_system || debug_shell debug-late
	fi

else

	SYSTEM=$(find_device "$SYSTEM")
	DATA=$(find_device "$DATA")
	RECOVERY=$(find_device "$RECOVERY")

fi

if [ -d $SYSTEM ]; then
	mount --bind $SYSTEM /android
else
	mount -o loop,noatime $SYSTEM /android
fi

hash -r
text_art


if ! grep 'sse4_2' /proc/cpuinfo 1>/dev/null; then {
  printf 'WARNING: Your CPU does not support SSE4.2 instructions, the OS will not boot\n';
} fi

cd /android

ln -s mnt/$SRC /src
ln -s /android/system/vendor/firmware /android/system/lib/modules /lib
if [ -z "$RCVRY" ]; then
	ln -s /android/system /
fi

if [ -d system/apex/com.android.runtime.debug ]; then
	ln -s ../android/system/apex/com.android.runtime.debug /apex/com.android.runtime
elif [ -d system/apex/com.android.runtime.release ]; then
	ln -s ../android/system/apex/com.android.runtime.release /apex/com.android.runtime
elif [ -d system/apex/com.android.runtime ]; then
	ln -s ../android/system/apex/com.android.runtime /apex/com.android.runtime
fi

if [ -z "$RCVRY" -o -z "$INSTALL" ]; then
bliss_feature
device_information
fi

if [ -n "$RCVRY" ]; then
	# Assuming if ramdisk-recovery.img exist, this is booting Live from USB
	if [ -e /src/ramdisk-recovery.img ]; then
		echo "WARNING: Do not boot Recovery in the Live environment"
		echo "System will now reboot"
		sleep 10
		return 1
	elif [ -e /src/recovery.img ]; then
		mkdir /recovery
		mount -t tmpfs tmpfs /recovery
		zcat /src/recovery.img | ( cd /recovery; cpio -iud > /dev/null )
	else
		echo "WARNING: No recovery.img found"
		echo "System will now reboot"
		sleep 10
		return 1
	fi

	rm -rf /recovery/lib
	mkdir -p /recovery/lib/modules
	mkdir -p /recovery/lib/firmware
	cd /android
fi

if [ -n "$INSTALL" ]; then
	zcat /src/install.img | ( cd /; cpio -iud > /dev/null )
fi

# load scripts
for s in `ls /scripts/* /src/scripts/*`; do
	test -e "$s" && source $s
done

# ensure keyboard driver is loaded
if [ -n "$INSTALL" -o -n "$DEBUG" ]; then
	echo "Detecting hardware..."
	busybox modprobe -a atkbd hid-apple
	# if [ "$AUTO_LOAD" = "alpine" ]; then
	# 	auto_detect_alpine &
	# else
	auto_detect &
	wait
	# fi
	# sleep 2
fi

if [ -n "$RCVRY" -o -n "$RCVRY_PROBE" ]; then
	echo "Detecting hardware for recovery..."
	busybox modprobe -a hid-apple
	auto_detect_recovery &
	sleep 2
fi

if [ 0$DEBUG -gt 0 ]; then
	echo -e "\nType 'exit' to continue booting...\n"
	debug_shell debug-found
fi

# A target should provide its detect_hardware function.
# On success, return 0 with the following values set.
# return 1 if it wants to use auto_detect
[ "$AUTO" != "1" ] && detect_hardware && FOUND=1

[ -n "$INSTALL" ] && do_install

load_modules
# if [ -n "$RCVRY" ]; then
# 	cd /recovery
# 	mount_data
# 	mount_sdcard
# 	mount_grub

# 	if [ -d /recovery/data/cache ]; then
# 		ln -s /data/cache /recovery/cache
# 	fi
# 	setup_ab_loops
# 	setup_data_loops

# 	mount --bind /android/system/lib/modules /recovery/lib/modules
# 	mount --bind /android/system/vendor/firmware /recovery/lib/firmware
# else
mount_data
mount_sdcard
mount_grub
setup_ab_loops
# fi
setup_tslib
setup_dpi
post_detect
feature_input_ports
addon_idc

if [ 0$DEBUG -gt 1 ]; then
	echo -e "\nUse Alt-F1/F2/F3 to switch between virtual consoles"
	echo -e "Type 'exit' to enter Android...\n"

	debug_shell debug-late
fi

[ -n "$DEBUG" ] && SWITCH=${SWITCH:-chroot}

# We must disable mdev before switching to Android
# since it conflicts with Android's init
echo > /proc/sys/kernel/hotplug

# Use correct modprobe location
echo /system/bin/modprobe > /proc/sys/kernel/modprobe

export ANDROID_ROOT=/system

# if [ -n "$RCVRY" ]; then
# 	exec ${SWITCH:-switch_root} /recovery /init
# else
exec ${SWITCH:-switch_root} /android /init
# fi

# avoid kernel panic
while :; do
	echo
	echo '	Android-x86 console shell. Use only in emergencies.'
	echo
	debug_shell fatal-err
done
